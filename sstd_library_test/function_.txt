
template<typename T>
class FunctionHelper;

template<typename ... Args>
class ArgsList {
public:
    constexpr static std::size_t length = sizeof...(Args);
};

/*function pointer ...*/
template< typename R, typename ... Args >
class FunctionHelper< R(*)(Args ...) > {
public:
    using ReturnType = R;
    using ClassType = void;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename ... Args >
class FunctionHelper< R(*)(Args ...) noexcept > {
public:
    using ReturnType = R;
    using ClassType = void;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

/*class function pointer ...*/
template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...)> {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const volatile > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const volatile noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

/*&*/
template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) &> {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) & noexcept  > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...)  const &> {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const & noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile & > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile & noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const  volatile & > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const volatile & noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

/*&&*/

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) && > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) && noexcept  > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...)  const &&> {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const && noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile && > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) volatile && noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const  volatile && > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename C, typename ... Args >
class FunctionHelper<R(C::*)(Args ...) const volatile && noexcept > {
public:
    using ReturnType = R;
    using ClassType = C;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
};

template< typename R, typename ... Args, template< typename ...> class F >
class FunctionHelper< F<R(Args ...)> > {
public:
    using ReturnType = R;
    using ClassType = void;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = F<R(Args ...)>;
};

template<typename T, typename = void>
class Function : public FunctionHelper< decltype(
    &std::remove_cv_t< std::remove_reference_t< T> >::operator()) > {
public:
    using FunctionObject = std::remove_cv_t< std::remove_reference_t< T> >;
    using ClassType = void;
};

template<typename T >
class Function< T, std::void_t< typename FunctionHelper<
    std::remove_cv_t< std::remove_reference_t<T>>>::ReturnType > > :
    public FunctionHelper< std::remove_cv_t< std::remove_reference_t< T> > > {
};

