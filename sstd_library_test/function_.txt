
namespace sstd::type_traits {

    namespace detail {
        /*中间推导过程，此中间变量与最终结果可能不同*/
        template<typename T>
        class FunctionHelper;

        template<typename ... Args>
        class ArgsList {
        public:
            constexpr static std::size_t length = sizeof...(Args);
        };

        /*function pointer ...*/
        template< typename R, typename ... Args >
        class FunctionHelper< R(*)(Args ...) > {
        public:
            using ReturnType = R;
            using ClassType = void;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(*FunctionPointer)(Args ...);
        };

        template< typename R, typename ... Args >
        class FunctionHelper< R(*)(Args ...) noexcept > {
        public:
            using ReturnType = R;
            using ClassType = void;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(*FunctionPointer)(Args ...);
        };

        /*class function pointer ...*/
        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...)> {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) ;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const volatile > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const volatile;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const volatile noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const volatile noexcept;
        };

        /*&*/
        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) &> {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) &;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) & noexcept  > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) & noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...)  const &> {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...)  const &;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const & noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const & noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile & > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile &;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile & noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile & noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const  volatile & > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const  volatile &;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const volatile & noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const volatile & noexcept;
        };

        /*&&*/

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) && > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) && ;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) && noexcept  > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) && noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...)  const &&> {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...)  const &&;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const && noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const && noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile && > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile &&;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) volatile && noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) volatile && noexcept;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const  volatile && > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const  volatile &&;
        };

        template< typename R, typename C, typename ... Args >
        class FunctionHelper<R(C::*)(Args ...) const volatile && noexcept > {
        public:
            using ReturnType = R;
            using ClassType = C;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = void;
            typedef R(C::*FunctionPointer)(Args ...) const volatile && noexcept;
        };

        template< typename R, typename ... Args, template< typename ...> class F >
        class FunctionHelper< F<R(Args ...)> > {
        public:
            using ReturnType = R;
            using ClassType = void;
            using ArgsType = ArgsList<Args ...>;
            using FunctionObject = F<R(Args ...)>;
            typedef void FunctionPointer;
        };
    }/*namespace detail*/

    /*
    using ReturnType = R;
    using ClassType = void;
    using ArgsType = ArgsList<Args ...>;
    using FunctionObject = void;
    typedef FunctionPointer void;
    */

    /*函数对象，只有一个 operator() */
    template<typename T, typename = void>
    class Function : public detail::FunctionHelper< decltype(
        &std::remove_cv_t< std::remove_reference_t< T> >::operator()) > {
    public:
        using FunctionObject = std::remove_cv_t< std::remove_reference_t< T> >;
        using ClassType = void;
        typedef void FunctionPointer ;
    };

    /*函数指针或类似于std::function<?(??)>这样的函数对象*/
    template<typename T >
    class Function< T, std::void_t< typename detail::FunctionHelper<
        std::remove_cv_t< std::remove_reference_t<T>>>::ReturnType > > :
        public detail::FunctionHelper< std::remove_cv_t< std::remove_reference_t< T> > > {
    };

}/*namespace sstd*/

template< typename T  ,
    typename = typename T::ClassType,
    typename = typename T::FunctionObject >
class Caller {
public:

    using ReturnType = typename T::ReturnType ;
    using ClassType = typename T::ClassType ;
    using ArgsType = typename T::ArgsType ;
    using FunctionObject = typename T::FunctionObject;
    using FunctionPointer = typename T::FunctionPointer;

    std::remove_cv_t< std::remove_reference_t< FunctionObject > > thisFunction;

    template<typename U>
    inline Caller( U && arg ) :
        thisFunction(std::forward<U>(arg)) {
    }

    template< typename ... Args >
    inline ReturnType call(Args && ... args) {
        return thisFunction(std::forward<Args>(args)...);
    }

};


template< typename T  >
class Caller< T , void ,void > {
public:

    using ReturnType = typename T::ReturnType;
    using ClassType = typename T::ClassType;
    using ArgsType = typename T::ArgsType;
    using FunctionObject = typename T::FunctionObject;
    using FunctionPointer = typename T::FunctionPointer;

    FunctionPointer thisFunction;

    inline Caller(FunctionPointer arg) : thisFunction(arg) {
    }

    template< typename ... Args >
    inline ReturnType call( Args && ... args ) {
        return thisFunction( std::forward<Args>(args)... );
    }

};

template< typename T ,typename C  >
class Caller< T  , C ,void > {
public:

    using ReturnType = typename T::ReturnType;
    using ClassType = typename T::ClassType;
    using ArgsType = typename T::ArgsType;
    using FunctionObject = typename T::FunctionObject;
    using FunctionPointer = typename T::FunctionPointer;

    FunctionPointer thisFunction;

    inline Caller(FunctionPointer arg) : thisFunction(arg) {
    }

    template< typename ... Args >
    inline ReturnType call(ClassType * t,Args && ... args) {
        return (t->*thisFunction)(std::forward<Args>(args)...);
    }

};
